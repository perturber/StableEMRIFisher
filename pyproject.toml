[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["stableemrifisher", "stableemrifisher.fisher"]

[project]
name = "stableemrifisher"
version = "2.0.0"
requires-python = ">=3.9"
authors = [
  {name = "Shubham Kejriwal", email = "shubhamkejriwal@u.nus.edu"},
  {name = "Ollie Burke", email = "ollie.burke@l2it.in2p3.fr"},
  {name = "Christian Chapman-Bird", email = "c.chapmanbird@gmail.com"},
  {name = "Alvin Chua", email = "alvinchua@u.nus.edu"},
]
description = "Stable Fisher matrix computation for EMRI gravitational wave parameter estimation"
readme = "README.md"
license = {text = "MIT"}
keywords = ["gravitational waves", "fisher matrix", "parameter estimation", "EMRI", "LISA"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "h5py>=3.0.0",
    "cython>=3.1.3",
    "matplotlib>=3.10.5",
    "fastemriwaveforms==2.0.0",
    "setuptools >= 61.0",
]

[project.optional-dependencies]
# CPU-only installation (default, works on all platforms)
cpu = ["fastemriwaveforms"]

# Specific CUDA toolkit versions (Linux x86_64 only)
# Note: These will install CUDA-specific versions of FastEMRIWaveforms
cuda11x = [
    "cupy-cuda11x>=12.0.0; platform_system=='Linux' and platform_machine=='x86_64'",
    "fastemriwaveforms-cuda11x; platform_system=='Linux' and platform_machine=='x86_64'",
]
cuda12x = [
    "cupy-cuda12x>=12.0.0; platform_system=='Linux' and platform_machine=='x86_64'",
    "fastemriwaveforms-cuda12x; platform_system=='Linux' and platform_machine=='x86_64'",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx_rtd_theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "sphinx-copybutton>=0.5.0",
    "matplotlib>=3.5.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

# Development dependencies
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-xdist>=2.0.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "isort>=5.0.0",
    "mypy>=0.900",
    "pylint>=2.15.0",
]

[project.urls]
Homepage = "https://github.com/perturber/StableEMRIFisher"
Documentation = "https://stableemrifisher.readthedocs.io"
Repository = "https://github.com/perturber/StableEMRIFisher"
Issues = "https://github.com/perturber/StableEMRIFisher/issues"

[tool.setuptools.package-data]
stableemrifisher = ["py.typed"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["stableemrifisher"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | docs/_build
)/
'''

[tool.pylint]
[tool.pylint.main]
# Specify a score threshold to be exceeded before program exits with error.
fail-under = 8.0

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value.
fail-on = ["C", "R", "W", "E", "F"]

[tool.pylint.messages_control]
# Disable the message, report, category or checker with the given id(s).
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring  
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0613",  # unused-argument
    "C0103",  # invalid-name (for scientific variable names like m1, m2, etc.)
    "R0902",  # too-many-instance-attributes
    "R0912",  # too-many-branches
    "import-error",  # Handle optional imports gracefully
]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 88

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 15

# Maximum number of attributes for a class.
max-attributes = 20

# Maximum number of boolean expressions in an if statement.
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 20

# Maximum number of locals for function / method body.
max-locals = 25

# Maximum number of statements in function / method body.
max-statements = 100
